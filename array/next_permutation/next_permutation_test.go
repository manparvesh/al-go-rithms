package nextPermutation

import (
	"fmt"
	"testing"
)

func checkArrayEquality(ar1, ar2 []int) bool {
	if len(ar1) != len(ar2) {
		return false
	}

	for i := 0; i < len(ar1); i++ {
		if ar1[i] != ar2[i] {
			return false
		}
	}

	return true
}

func TestNextPermutation(t *testing.T) {
	ar1 := [...]int{887, 778, 916, 794, 336, 387, 493, 650, 422, 363, 28, 691, 60, 764, 927, 541, 427, 173, 737, 212, 369, 568, 430, 783, 531, 863, 124, 68, 136, 930, 803, 23, 59, 70, 168, 394, 457, 12, 43, 230, 374, 422, 920, 785, 538, 199, 325, 316, 371, 414, 527, 92, 981, 957, 874, 863, 171, 997, 282, 306, 926, 85, 328, 337, 506, 847, 730, 314, 858, 125, 896, 583, 546, 815, 368, 435, 365, 44, 751, 88, 809, 277, 179, 789}
	ar1Ans := [...]int{887, 778, 916, 794, 336, 387, 493, 650, 422, 363, 28, 691, 60, 764, 927, 541, 427, 173, 737, 212, 369, 568, 430, 783, 531, 863, 124, 68, 136, 930, 803, 23, 59, 70, 168, 394, 457, 12, 43, 230, 374, 422, 920, 785, 538, 199, 325, 316, 371, 414, 527, 92, 981, 957, 874, 863, 171, 997, 282, 306, 926, 85, 328, 337, 506, 847, 730, 314, 858, 125, 896, 583, 546, 815, 368, 435, 365, 44, 751, 88, 809, 277, 789, 179}

	ar2 := [...]int{404, 652, 755, 400, 933, 61, 677, 369, 740, 13, 227, 587, 95, 540, 796, 571, 435, 379, 468, 602, 98, 903, 318, 493, 653, 757, 302, 281, 287, 442, 866, 690, 445, 620, 441, 730, 32, 118, 98, 772, 482, 676, 710, 928, 568, 857, 498, 354, 587, 966, 307, 684, 220, 625, 529, 872, 733, 830, 504, 20, 271, 369, 709, 716, 341, 150, 797, 724, 619, 246, 847, 452, 922, 556, 380, 489, 765, 229, 842, 351, 194, 501, 35, 765, 125}
	ar2Ans := [...]int{404, 652, 755, 400, 933, 61, 677, 369, 740, 13, 227, 587, 95, 540, 796, 571, 435, 379, 468, 602, 98, 903, 318, 493, 653, 757, 302, 281, 287, 442, 866, 690, 445, 620, 441, 730, 32, 118, 98, 772, 482, 676, 710, 928, 568, 857, 498, 354, 587, 966, 307, 684, 220, 625, 529, 872, 733, 830, 504, 20, 271, 369, 709, 716, 341, 150, 797, 724, 619, 246, 847, 452, 922, 556, 380, 489, 765, 229, 842, 351, 194, 501, 125, 35, 765}

	ar3 := [...]int{988, 857, 744, 492, 228, 366, 860, 937, 433, 552, 438, 229, 276, 408, 475}
	ar3Ans := [...]int{988, 857, 744, 492, 228, 366, 860, 937, 433, 552, 438, 229, 276, 475, 408}

	ar4 := [...]int{988, 857, 744, 492, 228, 23, 1}
	ar4Ans := [...]int{988, 857, 744, 492, 228, 23, 1}

	// run the function
	nextPermutation(ar1[:])
	nextPermutation(ar2[:])
	nextPermutation(ar3[:])
	nextPermutation(ar4[:])

	// test
	if checkArrayEquality(ar1[:], ar1Ans[:]) {
		fmt.Println("Success!")
		// Output: Success!
	} else {
		t.Error()
	}

	if checkArrayEquality(ar2[:], ar2Ans[:]) {
		fmt.Println("Success!")
		// Output: Success!
	} else {
		t.Error()
	}

	if checkArrayEquality(ar3[:], ar3Ans[:]) {
		fmt.Println("Success!")
		// Output: Success!
	} else {
		t.Error()
	}

	if checkArrayEquality(ar4[:], ar4Ans[:]) {
		fmt.Println("Success!")
		// Output: Success!
	} else {
		t.Error()
	}

}
